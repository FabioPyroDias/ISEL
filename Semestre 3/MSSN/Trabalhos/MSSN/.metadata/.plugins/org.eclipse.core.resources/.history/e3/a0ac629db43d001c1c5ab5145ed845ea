package ca;

import java.security.Key;

import processing.core.PApplet;
import processing.event.KeyEvent;
import setup.IProcessingApp;
import setup.ProcessingSetup;

public class JogoDaVida implements IProcessingApp{

	MyCellularAutomata ca;

	private int nRows = 30;
	private int nCols = 30;
	private int nStates = 2;
	private int radiusNeighbours = 1;
	
	//Game Control Variables
	private boolean isRunning;
	
	private float updateTime = 0.15f;
	private float timeWhenUpdated = 0;
	private float currentTime = 0;
	
	
	@Override
	public void setup(PApplet parent) {
		//Isto serve para evitar que o utilizador insira um número de linhas e de colunas menor que 20.
		//20 é o número que considero ideal para este projecto.
		if(nRows <= 20)
		{
			nRows = 20;
		}
		
		if(nCols <= 20)
		{
			nCols = 20;
		}
		
		ca = new MyCellularAutomata(parent, nRows, nCols, nStates, radiusNeighbours);
		
		/*
		InstrucoesJogoDaVida instrucoes = new InstrucoesJogoDaVida();
		parent.runSketch(new String[] {"InstrucoesJogoDaVida"} , instrucoes);
		
		instrucoes.setup(parent);
		*/
	}

	@Override
	public void draw(PApplet parent, float dt) {
		parent.background(128);
		parent.noStroke();
		
		currentTime = dt;
		
		if(isRunning)
		{
			if(currentTime - timeWhenUpdated >= updateTime)
			{
				timeWhenUpdated = currentTime;
				ca.SetNextState();
			}
		}
		
		ca.Display(parent);
	}

	@Override
	public void keyPressed(PApplet parent) {
		switch(parent.key)
		{
			case ' ':
				if(!isRunning)
				{
					isRunning = true;
					timeWhenUpdated = currentTime;
				}
				else
				{
					isRunning = false;
				}
				break;
				
			case 'r':
				isRunning = false;
				ca.RestartCells();
				break;
				
			case '1':
				if(!isRunning) 
				{
					ca.RestartCells();
					ca.SetBlinker(nRows, nCols);
				}
				break;
				
			case '2':
				if(!isRunning)
				{
					ca.RestartCells();
					ca.SetMajorBlinker(nRows, nCols);
				}
				break;
				
			case '3':
				if(!isRunning)
				{
					ca.RestartCells();
					ca.SetHeart(nRows, nCols);
				}
				break;
				
			case '4':
				if(!isRunning)
				{
					ca.RestartCells();
					ca.SetFlower(nRows, nCols);
				}
				break;
				
			default:
				break;
		}
	}

	@Override
	public void mousePressed(PApplet parent) {
		
		if(!isRunning)
		{
			MyCell cell = ca.PixelTooCell(parent.mouseX, parent.mouseY);

			if(cell.GetState() == 0)
			{
				cell.SetState(1);
			}
			else
			{
				cell.SetState(0);
			}
			
			ca.SetNextState(cell);
		}
	}
}
/*
	public class InstrucoesJogoDaVida extends PApplet{
		
		private static IProcessingApp processingApp;
		
		public void settings() {
			size(200, 200);
		}
		
		public void setup(PApplet parent) {
			parent.background(0);
			
			parent.textAlign(CENTER);
			parent.text("Instruções", parent.width/2, parent.height/2);
			
			
		}
		
		public static void main(String[] args) {
			PApplet.main(ProcessingSetup.class);
		}
	}
}
*/
